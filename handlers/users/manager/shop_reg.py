import config
from loader import dp, bot, instagram_basic_display
from config import *
import re
from keyboards import INIT_KEYBOARD
from utils import States
from aiogram import types
from dbcm import connect, commit_query, get_query

@dp.message_handler(state='*', commands=['new_shop'])  # done
async def vidget(msg: types.Message):
    state = dp.current_state(user=msg.chat.id)
    await bot.send_message(msg.chat.id, "new shop")
    message = "–ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ—Ñ–µ—Ä—Ç—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ:" \
              "\n https://allflowersbot.github.io/allflowers/term\n" \
              "https://allflowersbot.github.io/allflowers/Oferta\n"
    kb1 = types.InlineKeyboardMarkup()
    bm1 = types.InlineKeyboardButton("‚úÖ–¥–∞, –ø—Ä–∏–Ω–∏–º–∞—éüñå", callback_data='S_PP_conf')
    bm2 = types.InlineKeyboardButton("–Ω–µ—Ç, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é", callback_data='S_PP_NOT')
    bm3 = types.InlineKeyboardButton("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –±–µ–∑ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞", callback_data='not_inst')

    kb1.add(bm1, bm2)
    kb1.add(bm3)
    await bot.send_message(msg.chat.id,
                           message + "—Å–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã —Å –≤—ã—à–µ –∏–∑–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ?",
                           reply_markup=kb1)
    await state.set_state(States.NS0)

@dp.callback_query_handler(lambda c: c.data == 'not_inst', state=States.NS0)  # done
async def not_inst(callback_query: types.CallbackQuery):
    await callback_query.answer("without_inst")
    state = dp.current_state(user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "new shop without instagram")
    kb = types.ReplyKeyboardMarkup(True, True)
    kb.row("–í –Ω–∞—á–∞–ª–æ")
    await bot.send_message(callback_query.from_user.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞", reply_markup=kb)
    await state.set_state(States.Not_Inst)


@dp.message_handler(state=States.Not_Inst)
async def Not_Inst(msg: types.Message):
    state = dp.current_state(user=msg.chat.id)
    if msg.text == "–í –Ω–∞—á–∞–ª–æ":
        await bot.send_message(msg.chat.id, "–Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ", reply_markup=INIT_KEYBOARD)
        await state.set_state(States.AFT_INIT_STATE)
        return -1
    kb1 = types.InlineKeyboardMarkup()
    bm1 = types.InlineKeyboardButton("–ø—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data='NICN')
    bm2 = types.InlineKeyboardButton("–Ω–µ—Ç, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data='NINCN')
    kb1.add(bm1, bm2)
    await msg.answer(msg.text + "<- –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞", reply_markup=kb1)
    await state.set_state(States.Not_Inst1)

@dp.message_handler(state=States.Not_Inst1)
async def Not_Inst1(msg: types.Message):
    state = dp.current_state(user=msg.chat.id)
    if msg.text == "–í –Ω–∞—á–∞–ª–æ":
        await bot.send_message(msg.chat.id, "–Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ", reply_markup=INIT_KEYBOARD)
        await state.set_state(States.AFT_INIT_STATE)


@dp.callback_query_handler(lambda c: c.data == 'NICN', state=States.Not_Inst1)
async def process_callback_add(callback_query: types.CallbackQuery):
    await callback_query.answer("without_inst")
    state = dp.current_state(user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "—Ö–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    name = callback_query.message.text
    print(name)
    i = name.find("<- –Ω")
    full_name = name[:i]
    sql = ("insert into flobot.shops(shop_name, manager_chat_id, num_of_adress) "
           "values(%s, '%s', '%s');")
    value = (full_name, callback_query.message.chat.id, 1)
    commit_query(sql, value)

    sql2 = (" select shop_id from flobot.shops where manager_chat_id = %s ;")

    value2 = (callback_query.message.chat.id,)

    shop_id = get_query(sql2, value2)

    sql1 = ("insert into flobot.managers(shop_id, manager_chat_id) "
            "values('%s', '%s');")
    value1 = (shop_id, callback_query.message.chat.id,)

    commit_query(sql1, value1)

    await bot.send_message(callback_query.from_user.id,
                           "–≤–∞—à –º–∞–≥–∞–∑–∏–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –∏–º–µ–Ω–µ–º \"" + full_name + '\"' + " –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ "
                                                                                            "–∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞"
                                                                                            " –∏ –∏—Ö –∞–¥—Ä–µ—Å–∞")
    await bot.send_message(callback_query.from_user.id, "–¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤, —Ü–∏—Ñ—Ä–æ–π")
    await state.set_state(States.NS2)


@dp.callback_query_handler(lambda c: c.data == 'NINCN', state=States.Not_Inst1)
async def process_callback_add(callback_query: types.CallbackQuery):
    await callback_query.answer("not correct")
    state = dp.current_state(user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "new shop without instagram")
    await bot.send_message(callback_query.from_user.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
    await state.set_state(States.Not_Inst)


@dp.callback_query_handler(lambda c: c.data == 'S_PP_NOT', state=States.NS0)
async def process_callback_add(callback_query: types.CallbackQuery):
    await callback_query.answer("S_PP_NOT")
    state = dp.current_state(user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "–≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ ;D")
    await state.set_state(States.AFT_INIT_STATE)


@dp.callback_query_handler(lambda c: c.data == 'S_PP_conf', state=States.NS0)
async def process_callback_add(callback_query: types.CallbackQuery):
    await callback_query.answer("S_PP_conf")
    state = dp.current_state(user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "new shop")
    url = instagram_basic_display.get_login_url()
    await bot.send_message(callback_query.from_user.id, url)
    kb1 = types.InlineKeyboardMarkup()
    bm1 = types.InlineKeyboardButton("–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏", callback_data='shop_prove')
    kb1.add(bm1)

    await bot.send_message(callback_query.from_user.id, "–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–π–¥–∏—Ç–µ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞",
                           reply_markup=kb1)
    await state.set_state(States.NS1)


@dp.callback_query_handler(lambda c: c.data == 'shop_prove', state=States.NS1)
async def process_callback_add(callback_query: types.CallbackQuery):
    await callback_query.answer("shop_prove")
    state = dp.current_state(user=callback_query.from_user.id)
    print("shop_prove")
    try:
        file = open("/root/token/token.txt", "r")
    except:
        print("file_read except")
        return -1

    token = file.read()
    print("token:\n", token)
    short_lived = instagram_basic_display.get_o_auth_token(token)
    long_lived = instagram_basic_display.get_long_lived_token(short_lived.get('access_token'))
    profile = instagram_basic_display.set_access_token(long_lived["access_token"])

    pro = instagram_basic_display.get_user_profile()
    name = pro["username"]
    sql = ("insert into flobot.shops(shop_name, access_token, manager_chat_id, num_of_adress) "
           "values(%s, %s, '%s', '%s');")
    value = (name, long_lived["access_token"], callback_query.message.chat.id, 1)
    commit_query(sql, value)

    sql2 = (" select shop_id from flobot.shops where manager_chat_id = %s ;")

    value2 = (callback_query.message.chat.id,)

    shop_id = get_query(sql2, value2)

    sql1 = ("insert into flobot.managers(shop_id, manager_chat_id) "
            "values('%s', '%s');")
    value1 = (shop_id, callback_query.message.chat.id,)

    commit_query(sql1, value1)

    await bot.send_message(callback_query.from_user.id,
                           "–≤–∞—à –º–∞–≥–∞–∑–∏–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –∏–º–µ–Ω–µ–º \"" + name + '\"' + "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ "
                                                                                       "–∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞"
                                                                                       " –∏ –∏—Ö –∞–¥—Ä–µ—Å–∞")
    await bot.send_message(callback_query.from_user.id, "–¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤, —Ü–∏—Ñ—Ä–æ–π")
    await state.set_state(States.NS2)


@dp.message_handler(state=States.NS2)
async def NS(msg: types.Message):
    state = dp.current_state(user=msg.chat.id)
    if msg.text == "–í –Ω–∞—á–∞–ª–æ":
        await bot.send_message(msg.chat.id, "–Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ", reply_markup=INIT_KEYBOARD)
        await state.set_state(States.AFT_INIT_STATE)
    print(msg)

    res = re.search("\d{1,2}", msg.text)
    print(res)

    await bot.send_message(
        msg.chat.id, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: " + str(res[0])
    )
    sqlin = ("update flobot.shops set num_of_adress = '%s'"
             "where manager_chat_id = '%s';")
    value = (int(res[0]), msg.chat.id)
    commit_query(sqlin, value)
    key = types.ReplyKeyboardMarkup(True, True)
    key.row("–∑–∞–≤–µ—Ä—à–∏—Ç—å")
    key.row("–Ω–∞–∑–∞–¥, –∞–¥—Ä–µ—Å –Ω–µ –≤–µ—Ä–µ–Ω")
    await bot.send_message(
        msg.chat.id,
        "—Ç–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–≥. –ú–æ—Å–∫–≤–∞, –≥–∞–∑–≥–æ–ª—å–¥–µ—Ä–Ω–∞—è 10–ê\"\n"
        "–∫–∞–∫ –∞–¥—Ä–µ—Å–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è - –Ω–∞–∂–º–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞ :: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
        reply_markup=key)
    await state.set_state(States.NS3)


@dp.message_handler(state=States.NS3)  # @dp.message_handler(state=States.NS3)
async def NS(msg: types.Message):
    state = dp.current_state(user=msg.chat.id)
    i = True
    if msg.text == "–∑–∞–≤–µ—Ä—à–∏—Ç—å":  # if msg.text == "–∑–∞–≤–µ—Ä—à–∏—Ç—å"

        cnx = connect()

        cursor = cnx.cursor()
        sql = ("select shop_name, access_token, shop_id from flobot.shops where manager_chat_id = '%s';")
        cursor.execute(sql, (msg.chat.id,))  # todo —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ state!
        curs = cursor.fetchall()
        print(curs)
        for shops in curs:
            if shops[1]:
                instagram_basic_display.set_access_token(shops[1])
                profile = instagram_basic_display.get_user_profile()
                print(profile)
                media = instagram_basic_display.get_user_media(limit=100)  # –ø–æ –∑–∞–∫–∞–∑—É - 100
                list = media['data']
                i = 0
                for curr in list:
                    i += 1
                    image = curr['media_url']
                    ff = 100
                    ff = re.search("https://video", image)

                    print(ff)
                    if ff == None:
                        caption = curr['caption']
                        tmp = caption[:255]
                        print(image, i)
                        # time.sleep(0.1)
                        ch = await bot.send_photo(msg.chat.id, image, caption)

                        sql = ("insert into flobot.products(file_id, caption, shop_id, shop)"
                               "values(%s,  %s, %s, %s)")
                        value = (
                            ch.photo[-1].file_id,
                            tmp,
                            shops[2],
                            profile["username"]
                        )

                        commit_query(sql, value)
                        # await bot.delete_message(ch.chat.id, ch.message_id)

        print("finish")
        await bot.send_message(msg.chat.id,
                               "—Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ /manager_mode, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!)",
                               reply_markup=INIT_KEYBOARD)  # todo

        await state.set_state(States.AFT_INIT_STATE)
    else:
        from dadata import DadataAsync
        token = DADATA_TOKEN
        secret = config.DADATA_SECRET
        dadata = DadataAsync(token)
        result = await dadata.suggest("address", msg.text)
        await dadata.close()
        if not result:
            await bot.send_message(msg.chat.id, "—Å–µ—Ä–≤–∏—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –†–æ—Å—Å–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            await  state.set_state(States.NS3)
            return -1
        current_value = ""
        lon = 1.
        lat = 1.
        for row in result:
            value = row['value']
            current_value = value
            dadata = DadataAsync(token, secret)
            result = await dadata.clean("address", current_value)
            lon = result['geo_lon']
            lat = result['geo_lat']
            await dadata.close()
            break

        sql = ("select shop_id from flobot.shops where manager_chat_id = '%s';")
        value = (msg.chat.id,)
        res = get_query(sql, value)

        sqlin = ("insert into flobot.shop_addr(shop_id, addr, lon, lat) "
                 "values(%s, %s, %s, %s);")
        value = (res, current_value, lon, lat)
        commit_query(sqlin, value)
        kb1 = types.InlineKeyboardMarkup()
        bm1 = types.InlineKeyboardButton("–∞–¥—Ä–µ—Å –≤–µ—Ä–Ω—ã–π", callback_data='addr_true')
        bm2 = types.InlineKeyboardButton("–∞–¥—Ä–µ—Å –Ω–µ –≤–µ—Ä–Ω—ã–π", callback_data='addr_false')

        kb1.add(bm1)
        kb1.add(bm2)

        await bot.send_message(msg.chat.id, "–∞–¥—Ä–µ—Å: " + current_value, reply_markup=kb1)
        await state.set_state(States.NS4)


@dp.callback_query_handler(lambda c: c.data == 'addr_false', state=States.NS4)
async def process_callback_add(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    await callback_query.answer("addr_false")
    await bot.send_message(callback_query.from_user.id, "—Å–µ–π—á–∞—Å –∏—Å–ø—Ä–∞–≤–∏–º!")
    print(callback_query["message"]["text"])
    raw_addr = callback_query["message"]["text"]
    i = raw_addr.find("–∞–¥—Ä–µ—Å: ")  # 7
    addr = raw_addr[7:]

    sql = (" delete from flobot.shop_addr where addr = %s")
    value = (addr,)
    commit_query(sql, value)

    await bot.send_message(callback_query.from_user.id, "—Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ) –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!")
    await state.set_state(States.NS3)


@dp.callback_query_handler(lambda c: c.data == 'addr_true', state=States.NS4)
async def process_callback_add(callback_query: types.CallbackQuery):
    await callback_query.answer("addr_true")
    state = dp.current_state(user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "–æ—Ç–ª–∏—á–Ω–æ!")
    await state.set_state(States.NS3)

